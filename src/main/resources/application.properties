# ===== CONFIGURACIÓN BASE DE DATOS =====
# Para Docker (se sobrescribe con variables de entorno)
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3308/sismos?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:admin}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:admin}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===== CONFIGURACIÓN JPA/HIBERNATE =====
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.dialect=${SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT:org.hibernate.dialect.MySQL8Dialect}
spring.jpa.properties.hibernate.format_sql=true

# ===== CONFIGURACIÓN POOL DE CONEXIONES =====
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ===== CONFIGURACIÓN SERVIDOR =====
server.port=8080
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# ===== CONFIGURACIÓN THYMELEAF =====
spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# ===== CONFIGURACIÓN WEBSOCKET =====
spring.websocket.cors.allowed-origins=*
spring.websocket.heartbeat.interval=10000

# ===== CONFIGURACIÓN SISMOS API =====
sismos.api.ssn.url=http://www2.ssn.unam.mx:8080/catalogo/
sismos.api.usgs.url=https://earthquake.usgs.gov/fdsnws/event/1/
sismos.actualizacion.intervalo=300000
sismos.alerta.magnitud.minima=4.0
sismos.alerta.magnitud.critica=6.0

# ===== CONFIGURACIÓN CACHE =====
spring.cache.type=simple
spring.cache.cache-names=sismos,estadisticas,zonas

# ===== CONFIGURACIÓN DATAWAREHOUSE =====
# Activar/desactivar carga automática de datos del DataWarehouse
datawarehouse.load.enabled=${DATAWAREHOUSE_LOAD_ENABLED:true}

# Solo cargar datos si las tablas están vacías (evita duplicados)
datawarehouse.load.only-if-empty=${DATAWAREHOUSE_ONLY_IF_EMPTY:true}

# Modo de carga: SQL o CSV
datawarehouse.load.mode=${DATAWAREHOUSE_MODE:SQL}

# Ruta base para archivos de datos
datawarehouse.data.path=${DATAWAREHOUSE_PATH:data/}

# Timeout para operaciones de carga (en segundos)
datawarehouse.load.timeout=${DATAWAREHOUSE_TIMEOUT:300}

# Tamaño de lote para inserciones (para optimizar rendimiento)
datawarehouse.batch.size=${DATAWAREHOUSE_BATCH_SIZE:1000}

# ===== CONFIGURACIÓN LOGS =====
logging.level.com.spring.proyectofinal=INFO
logging.level.com.spring.proyectofinal.service.DataLoader=INFO
logging.level.com.spring.proyectofinal.service.DataWarehouseService=INFO
logging.level.org.springframework.messaging=DEBUG
logging.level.org.springframework.web=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# ===== CONFIGURACIÓN ACTUATOR =====
management.endpoints.web.exposure.include=health,info,metrics,datawarehouse
management.endpoint.health.show-details=always

# Endpoint personalizado para verificar estado del DataWarehouse
management.endpoint.datawarehouse.enabled=true

# ===== CONFIGURACIÓN DE MEMORIA (PARA ARCHIVOS GRANDES) =====
# Aumentar límites si tienes archivos SQL muy grandes
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# ===== CONFIGURACIÓN DE CHARSET =====
# Asegurar UTF-8 para caracteres especiales en español
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# ===== CONFIGURACIÓN DE TIMEZONE =====
# Zona horaria de México
spring.jpa.properties.hibernate.jdbc.time_zone=America/Mexico_City